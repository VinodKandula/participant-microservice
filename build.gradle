buildscript {
	ext {
		NEXUS_REPO_URL = 'http://192.168.1.31:8081/repository/amhzing'

		springBootVersion = '1.3.5.RELEASE'
		axonVersion = '2.4.4'
		commonsLangVersion = '3.4'
		logbackVersion = '1.1.7'
		logstashLogbackVersion = '4.7'
		janinoVersion = '2.7.8'
		jugVersion = '3.1.4'
		slf4jVersion = '1.7.21'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'idea'

group = 'com.amhzing.participant'
version = file("version.txt").text

jar {
	baseName = 'participant-microservice'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-actuator-docs')
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-cache')
	//compile('org.springframework.boot:spring-boot-starter-amqp')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	//compile('org.springframework.boot:spring-boot-starter-data-cassandra')
	compile('org.springframework.boot:spring-boot-starter-web')

	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-starter-eureka')
	compile('org.springframework.cloud:spring-cloud-starter-feign')
	compile('org.springframework.cloud:spring-cloud-starter-hystrix')
	compile('org.springframework.cloud:spring-cloud-starter-ribbon')

	//compile('org.projectlombok:lombok:1.16.6')
	compile('org.springframework.retry:spring-retry')
	//compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.session:spring-session')

	compile ("org.axonframework:axon-core:${axonVersion}")
	compile ("org.axonframework:axon-mongo:${axonVersion}")
	compile ("org.axonframework:axon-amqp:${axonVersion}")
	compile ("org.axonframework:axon-test:${axonVersion}")

	compile ("ch.qos.logback:logback-classic:${logbackVersion}")
	compile ("ch.qos.logback:logback-core:${logbackVersion}")
	compile ("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
	compile ("org.codehaus.janino:janino:${janinoVersion}")
	compile ("org.slf4j:slf4j-api:${slf4jVersion}")

	compile ("org.apache.commons:commons-lang3:${commonsLangVersion}")
	compile ("com.fasterxml.uuid:java-uuid-generator:${jugVersion}")

	testCompile('org.springframework.boot:spring-boot-starter-test') 
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

dependencyManagement {
	imports { 
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE" 
	}
}

def integrationTests = 'com/amhzing/participant/integrationtest/**'
def functionalTests = 'com/amhzing/participant/functionaltest/**'

test {
    exclude integrationTests
	exclude functionalTests
}

task integrationTest(type:Test) {
    include integrationTests
}

task functionalTest(type:Test) {
	include functionalTests
}

task release << {
	println "Building release version=$version"
}

gradle.taskGraph.whenReady {taskGraph ->
	if (!taskGraph.hasTask(release)) {
		version += '-SNAPSHOT'
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "${NEXUS_REPO_URL}-releases") {
				authentication(userName: mavenUser, password: mavenPassword)
			}
			snapshotRepository(url: "${NEXUS_REPO_URL}-snapshots") {
				authentication(userName: mavenUser, password: mavenPassword)
			}
		}
	}
}

// Make the System.properties available in the bootRun task.
bootRun.systemProperties = System.properties